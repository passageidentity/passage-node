/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ElementCustomization } from './ElementCustomization';
import {
    ElementCustomizationFromJSON,
    ElementCustomizationFromJSONTyped,
    ElementCustomizationToJSON,
} from './ElementCustomization';
import type { Layouts } from './Layouts';
import {
    LayoutsFromJSON,
    LayoutsFromJSONTyped,
    LayoutsToJSON,
} from './Layouts';
import type { Technologies } from './Technologies';
import {
    TechnologiesFromJSON,
    TechnologiesFromJSONTyped,
    TechnologiesToJSON,
} from './Technologies';
import type { UserMetadataField } from './UserMetadataField';
import {
    UserMetadataFieldFromJSON,
    UserMetadataFieldFromJSONTyped,
    UserMetadataFieldToJSON,
} from './UserMetadataField';

/**
 * 
 * @export
 * @interface AppInfo
 */
export interface AppInfo {
    /**
     * 
     * @type {Array<string>}
     * @memberof AppInfo
     */
    additionalAuthOrigins: Array<string>;
    /**
     * The valid URLs where users can be redirected after authentication.
     * @type {Array<string>}
     * @memberof AppInfo
     */
    allowedCallbackUrls: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AppInfo
     */
    allowedIdentifier: string;
    /**
     * The valid URLs where users can be redirected after logging out.
     * @type {Array<string>}
     * @memberof AppInfo
     */
    allowedLogoutUrls: Array<string>;
    /**
     * A route within your application that redirects to the Authorization URL endpoint.
     * @type {string}
     * @memberof AppInfo
     */
    applicationLoginUri: string;
    /**
     * 
     * @type {string}
     * @memberof AppInfo
     */
    authFallbackMethod: string;
    /**
     * 
     * @type {number}
     * @memberof AppInfo
     */
    authFallbackMethodTtl: number;
    /**
     * 
     * @type {string}
     * @memberof AppInfo
     */
    authOrigin: string;
    /**
     * 
     * @type {Date}
     * @memberof AppInfo
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof AppInfo
     */
    defaultLanguage: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppInfo
     */
    ephemeral: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppInfo
     */
    id: string;
    /**
     * 
     * @type {Layouts}
     * @memberof AppInfo
     */
    layouts: Layouts;
    /**
     * 
     * @type {string}
     * @memberof AppInfo
     */
    loginUrl: string;
    /**
     * 
     * @type {string}
     * @memberof AppInfo
     */
    name: string;
    /**
     * whether or not the app's login page hosted by passage
     * @type {boolean}
     * @memberof AppInfo
     */
    hosted: boolean;
    /**
     * the subdomain of the app's hosted login page
     * @type {string}
     * @memberof AppInfo
     */
    hostedSubdomain: string;
    /**
     * 
     * @type {boolean}
     * @memberof AppInfo
     */
    passageBranding: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AppInfo
     */
    profileManagement: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AppInfo
     */
    publicSignup: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppInfo
     */
    redirectUrl: string;
    /**
     * 
     * @type {number}
     * @memberof AppInfo
     */
    refreshAbsoluteLifetime: number;
    /**
     * 
     * @type {boolean}
     * @memberof AppInfo
     */
    refreshEnabled: boolean;
    /**
     * 
     * @type {number}
     * @memberof AppInfo
     */
    refreshInactivityLifetime: number;
    /**
     * 
     * @type {boolean}
     * @memberof AppInfo
     */
    requireEmailVerification: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AppInfo
     */
    requireIdentifierVerification: boolean;
    /**
     * 
     * @type {string}
     * @memberof AppInfo
     */
    requiredIdentifier: string;
    /**
     * 
     * @type {string}
     * @memberof AppInfo
     */
    role: string;
    /**
     * 
     * @type {string}
     * @memberof AppInfo
     */
    rsaPublicKey: string;
    /**
     * can only be retrieved by an app admin
     * @type {string}
     * @memberof AppInfo
     */
    secret?: string;
    /**
     * 
     * @type {number}
     * @memberof AppInfo
     */
    sessionTimeoutLength: number;
    /**
     * 
     * @type {string}
     * @memberof AppInfo
     */
    type: AppInfoTypeEnum;
    /**
     * 
     * @type {Array<UserMetadataField>}
     * @memberof AppInfo
     */
    userMetadataSchema: Array<UserMetadataField>;
    /**
     * 
     * @type {Array<Technologies>}
     * @memberof AppInfo
     */
    technologies: Array<Technologies>;
    /**
     * 
     * @type {ElementCustomization}
     * @memberof AppInfo
     */
    elementCustomization: ElementCustomization;
}


/**
 * @export
 */
export const AppInfoTypeEnum = {
    Complete: 'complete',
    Flex: 'flex'
} as const;
export type AppInfoTypeEnum = typeof AppInfoTypeEnum[keyof typeof AppInfoTypeEnum];


/**
 * Check if a given object implements the AppInfo interface.
 */
export function instanceOfAppInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "additionalAuthOrigins" in value;
    isInstance = isInstance && "allowedCallbackUrls" in value;
    isInstance = isInstance && "allowedIdentifier" in value;
    isInstance = isInstance && "allowedLogoutUrls" in value;
    isInstance = isInstance && "applicationLoginUri" in value;
    isInstance = isInstance && "authFallbackMethod" in value;
    isInstance = isInstance && "authFallbackMethodTtl" in value;
    isInstance = isInstance && "authOrigin" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "defaultLanguage" in value;
    isInstance = isInstance && "ephemeral" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "layouts" in value;
    isInstance = isInstance && "loginUrl" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "hosted" in value;
    isInstance = isInstance && "hostedSubdomain" in value;
    isInstance = isInstance && "passageBranding" in value;
    isInstance = isInstance && "profileManagement" in value;
    isInstance = isInstance && "publicSignup" in value;
    isInstance = isInstance && "redirectUrl" in value;
    isInstance = isInstance && "refreshAbsoluteLifetime" in value;
    isInstance = isInstance && "refreshEnabled" in value;
    isInstance = isInstance && "refreshInactivityLifetime" in value;
    isInstance = isInstance && "requireEmailVerification" in value;
    isInstance = isInstance && "requireIdentifierVerification" in value;
    isInstance = isInstance && "requiredIdentifier" in value;
    isInstance = isInstance && "role" in value;
    isInstance = isInstance && "rsaPublicKey" in value;
    isInstance = isInstance && "sessionTimeoutLength" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "userMetadataSchema" in value;
    isInstance = isInstance && "technologies" in value;
    isInstance = isInstance && "elementCustomization" in value;

    return isInstance;
}

export function AppInfoFromJSON(json: any): AppInfo {
    return AppInfoFromJSONTyped(json, false);
}

export function AppInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AppInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'additionalAuthOrigins': json['additional_auth_origins'],
        'allowedCallbackUrls': json['allowed_callback_urls'],
        'allowedIdentifier': json['allowed_identifier'],
        'allowedLogoutUrls': json['allowed_logout_urls'],
        'applicationLoginUri': json['application_login_uri'],
        'authFallbackMethod': json['auth_fallback_method'],
        'authFallbackMethodTtl': json['auth_fallback_method_ttl'],
        'authOrigin': json['auth_origin'],
        'createdAt': (new Date(json['created_at'])),
        'defaultLanguage': json['default_language'],
        'ephemeral': json['ephemeral'],
        'id': json['id'],
        'layouts': LayoutsFromJSON(json['layouts']),
        'loginUrl': json['login_url'],
        'name': json['name'],
        'hosted': json['hosted'],
        'hostedSubdomain': json['hosted_subdomain'],
        'passageBranding': json['passage_branding'],
        'profileManagement': json['profile_management'],
        'publicSignup': json['public_signup'],
        'redirectUrl': json['redirect_url'],
        'refreshAbsoluteLifetime': json['refresh_absolute_lifetime'],
        'refreshEnabled': json['refresh_enabled'],
        'refreshInactivityLifetime': json['refresh_inactivity_lifetime'],
        'requireEmailVerification': json['require_email_verification'],
        'requireIdentifierVerification': json['require_identifier_verification'],
        'requiredIdentifier': json['required_identifier'],
        'role': json['role'],
        'rsaPublicKey': json['rsa_public_key'],
        'secret': !exists(json, 'secret') ? undefined : json['secret'],
        'sessionTimeoutLength': json['session_timeout_length'],
        'type': json['type'],
        'userMetadataSchema': ((json['user_metadata_schema'] as Array<any>).map(UserMetadataFieldFromJSON)),
        'technologies': ((json['technologies'] as Array<any>).map(TechnologiesFromJSON)),
        'elementCustomization': ElementCustomizationFromJSON(json['element_customization']),
    };
}

export function AppInfoToJSON(value?: AppInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'additional_auth_origins': value.additionalAuthOrigins,
        'allowed_callback_urls': value.allowedCallbackUrls,
        'allowed_identifier': value.allowedIdentifier,
        'allowed_logout_urls': value.allowedLogoutUrls,
        'application_login_uri': value.applicationLoginUri,
        'auth_fallback_method': value.authFallbackMethod,
        'auth_fallback_method_ttl': value.authFallbackMethodTtl,
        'auth_origin': value.authOrigin,
        'created_at': (value.createdAt.toISOString()),
        'default_language': value.defaultLanguage,
        'ephemeral': value.ephemeral,
        'id': value.id,
        'layouts': LayoutsToJSON(value.layouts),
        'login_url': value.loginUrl,
        'name': value.name,
        'hosted': value.hosted,
        'hosted_subdomain': value.hostedSubdomain,
        'passage_branding': value.passageBranding,
        'profile_management': value.profileManagement,
        'public_signup': value.publicSignup,
        'redirect_url': value.redirectUrl,
        'refresh_absolute_lifetime': value.refreshAbsoluteLifetime,
        'refresh_enabled': value.refreshEnabled,
        'refresh_inactivity_lifetime': value.refreshInactivityLifetime,
        'require_email_verification': value.requireEmailVerification,
        'require_identifier_verification': value.requireIdentifierVerification,
        'required_identifier': value.requiredIdentifier,
        'role': value.role,
        'rsa_public_key': value.rsaPublicKey,
        'secret': value.secret,
        'session_timeout_length': value.sessionTimeoutLength,
        'type': value.type,
        'user_metadata_schema': ((value.userMetadataSchema as Array<any>).map(UserMetadataFieldToJSON)),
        'technologies': ((value.technologies as Array<any>).map(TechnologiesToJSON)),
        'element_customization': ElementCustomizationToJSON(value.elementCustomization),
    };
}

