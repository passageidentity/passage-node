/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserRecentEvent } from './UserRecentEvent';
import {
    UserRecentEventFromJSON,
    UserRecentEventFromJSONTyped,
    UserRecentEventToJSON,
    UserRecentEventToJSONTyped,
} from './UserRecentEvent';
import type { UserSocialConnections } from './UserSocialConnections';
import {
    UserSocialConnectionsFromJSON,
    UserSocialConnectionsFromJSONTyped,
    UserSocialConnectionsToJSON,
    UserSocialConnectionsToJSONTyped,
} from './UserSocialConnections';
import type { WebAuthnDevices } from './WebAuthnDevices';
import {
    WebAuthnDevicesFromJSON,
    WebAuthnDevicesFromJSONTyped,
    WebAuthnDevicesToJSON,
    WebAuthnDevicesToJSONTyped,
} from './WebAuthnDevices';
import type { UserStatus } from './UserStatus';
import {
    UserStatusFromJSON,
    UserStatusFromJSONTyped,
    UserStatusToJSON,
    UserStatusToJSONTyped,
} from './UserStatus';
import type { WebAuthnType } from './WebAuthnType';
import {
    WebAuthnTypeFromJSON,
    WebAuthnTypeFromJSONTyped,
    WebAuthnTypeToJSON,
    WebAuthnTypeToJSONTyped,
} from './WebAuthnType';

/**
 * 
 * @export
 * @interface PassageUser
 */
export interface PassageUser {
    /**
     * 
     * @type {Date}
     * @memberof PassageUser
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof PassageUser
     */
    email: string;
    /**
     * 
     * @type {boolean}
     * @memberof PassageUser
     */
    emailVerified: boolean;
    /**
     * The external ID of the user. Only set if the user was created in a Flex app.
     * @type {string}
     * @memberof PassageUser
     */
    externalId: string;
    /**
     * 
     * @type {string}
     * @memberof PassageUser
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof PassageUser
     */
    lastLoginAt: Date;
    /**
     * 
     * @type {number}
     * @memberof PassageUser
     */
    loginCount: number;
    /**
     * 
     * @type {string}
     * @memberof PassageUser
     */
    phone: string;
    /**
     * 
     * @type {boolean}
     * @memberof PassageUser
     */
    phoneVerified: boolean;
    /**
     * 
     * @type {Array<UserRecentEvent>}
     * @memberof PassageUser
     */
    recentEvents: Array<UserRecentEvent>;
    /**
     * 
     * @type {UserSocialConnections}
     * @memberof PassageUser
     */
    socialConnections: UserSocialConnections;
    /**
     * 
     * @type {UserStatus}
     * @memberof PassageUser
     */
    status: UserStatus;
    /**
     * 
     * @type {Date}
     * @memberof PassageUser
     */
    updatedAt: Date;
    /**
     * 
     * @type {object}
     * @memberof PassageUser
     */
    userMetadata: object | null;
    /**
     * 
     * @type {boolean}
     * @memberof PassageUser
     */
    webauthn: boolean;
    /**
     * 
     * @type {Array<WebAuthnDevices>}
     * @memberof PassageUser
     */
    webauthnDevices: Array<WebAuthnDevices>;
    /**
     * List of credential types that have been used for authentication
     * @type {Array<WebAuthnType>}
     * @memberof PassageUser
     */
    webauthnTypes: Array<WebAuthnType>;
}



/**
 * Check if a given object implements the PassageUser interface.
 */
export function instanceOfPassageUser(value: object): value is PassageUser {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('emailVerified' in value) || value['emailVerified'] === undefined) return false;
    if (!('externalId' in value) || value['externalId'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('lastLoginAt' in value) || value['lastLoginAt'] === undefined) return false;
    if (!('loginCount' in value) || value['loginCount'] === undefined) return false;
    if (!('phone' in value) || value['phone'] === undefined) return false;
    if (!('phoneVerified' in value) || value['phoneVerified'] === undefined) return false;
    if (!('recentEvents' in value) || value['recentEvents'] === undefined) return false;
    if (!('socialConnections' in value) || value['socialConnections'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('userMetadata' in value) || value['userMetadata'] === undefined) return false;
    if (!('webauthn' in value) || value['webauthn'] === undefined) return false;
    if (!('webauthnDevices' in value) || value['webauthnDevices'] === undefined) return false;
    if (!('webauthnTypes' in value) || value['webauthnTypes'] === undefined) return false;
    return true;
}

export function PassageUserFromJSON(json: any): PassageUser {
    return PassageUserFromJSONTyped(json, false);
}

export function PassageUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): PassageUser {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': (new Date(json['created_at'])),
        'email': json['email'],
        'emailVerified': json['email_verified'],
        'externalId': json['external_id'],
        'id': json['id'],
        'lastLoginAt': (new Date(json['last_login_at'])),
        'loginCount': json['login_count'],
        'phone': json['phone'],
        'phoneVerified': json['phone_verified'],
        'recentEvents': ((json['recent_events'] as Array<any>).map(UserRecentEventFromJSON)),
        'socialConnections': UserSocialConnectionsFromJSON(json['social_connections']),
        'status': UserStatusFromJSON(json['status']),
        'updatedAt': (new Date(json['updated_at'])),
        'userMetadata': json['user_metadata'],
        'webauthn': json['webauthn'],
        'webauthnDevices': ((json['webauthn_devices'] as Array<any>).map(WebAuthnDevicesFromJSON)),
        'webauthnTypes': ((json['webauthn_types'] as Array<any>).map(WebAuthnTypeFromJSON)),
    };
}

export function PassageUserToJSON(json: any): PassageUser {
    return PassageUserToJSONTyped(json, false);
}

export function PassageUserToJSONTyped(value?: PassageUser | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created_at': ((value['createdAt']).toISOString()),
        'email': value['email'],
        'email_verified': value['emailVerified'],
        'external_id': value['externalId'],
        'id': value['id'],
        'last_login_at': ((value['lastLoginAt']).toISOString()),
        'login_count': value['loginCount'],
        'phone': value['phone'],
        'phone_verified': value['phoneVerified'],
        'recent_events': ((value['recentEvents'] as Array<any>).map(UserRecentEventToJSON)),
        'social_connections': UserSocialConnectionsToJSON(value['socialConnections']),
        'status': UserStatusToJSON(value['status']),
        'updated_at': ((value['updatedAt']).toISOString()),
        'user_metadata': value['userMetadata'],
        'webauthn': value['webauthn'],
        'webauthn_devices': ((value['webauthnDevices'] as Array<any>).map(WebAuthnDevicesToJSON)),
        'webauthn_types': ((value['webauthnTypes'] as Array<any>).map(WebAuthnTypeToJSON)),
    };
}

