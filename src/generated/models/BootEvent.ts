/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BootEventAllOfEvent } from './BootEventAllOfEvent';
import {
    BootEventAllOfEventFromJSON,
    BootEventAllOfEventFromJSONTyped,
    BootEventAllOfEventToJSON,
} from './BootEventAllOfEvent';

/**
 * 
 * @export
 * @interface BootEvent
 */
export interface BootEvent {
    /**
     * The ID of the deployment that caused this event to be generated.
     * @type {string}
     * @memberof BootEvent
     */
    deployment_id: string;
    /**
     * The type of event.
     * @type {string}
     * @memberof BootEvent
     */
    event_type: BootEventEventTypeEnum;
    /**
     * Timestamp for when this event was created, in RFC3339 format.
     * @type {Date}
     * @memberof BootEvent
     */
    timestamp: Date;
    /**
     * If the event was caused by a running isolate, this field contains the opaque ID of the given isolate.
     * @type {string}
     * @memberof BootEvent
     */
    isolate_id?: string;
    /**
     * The region where the event was generated. Refer to https://deno.com/deploy/docs/regions for possible values.
     * @type {string}
     * @memberof BootEvent
     */
    region: string;
    /**
     * 
     * @type {BootEventAllOfEvent}
     * @memberof BootEvent
     */
    event: BootEventAllOfEvent;
}


/**
 * @export
 */
export const BootEventEventTypeEnum = {
    Boot: 'boot',
    BootFailure: 'bootFailure',
    Log: 'log',
    UncaughtException: 'uncaughtException',
    MemoryLimit: 'memoryLimit',
    TimeLimit: 'timeLimit'
} as const;
export type BootEventEventTypeEnum = typeof BootEventEventTypeEnum[keyof typeof BootEventEventTypeEnum];


/**
 * Check if a given object implements the BootEvent interface.
 */
export function instanceOfBootEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "deployment_id" in value;
    isInstance = isInstance && "event_type" in value;
    isInstance = isInstance && "timestamp" in value;
    isInstance = isInstance && "region" in value;
    isInstance = isInstance && "event" in value;

    return isInstance;
}

export function BootEventFromJSON(json: any): BootEvent {
    return BootEventFromJSONTyped(json, false);
}

export function BootEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): BootEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'deployment_id': json['deployment_id'],
        'event_type': json['event_type'],
        'timestamp': (new Date(json['timestamp'])),
        'isolate_id': !exists(json, 'isolate_id') ? undefined : json['isolate_id'],
        'region': json['region'],
        'event': BootEventAllOfEventFromJSON(json['event']),
    };
}

export function BootEventToJSON(value?: BootEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'deployment_id': value.deployment_id,
        'event_type': value.event_type,
        'timestamp': (value.timestamp.toISOString()),
        'isolate_id': value.isolate_id,
        'region': value.region,
        'event': BootEventAllOfEventToJSON(value.event),
    };
}

