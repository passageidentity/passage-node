/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EmailTemplateType } from './EmailTemplateType';
import {
    EmailTemplateTypeFromJSON,
    EmailTemplateTypeFromJSONTyped,
    EmailTemplateTypeToJSON,
} from './EmailTemplateType';

/**
 * 
 * @export
 * @interface EmailTemplate
 */
export interface EmailTemplate {
    /**
     * empty string indicates the template is a default template.
     * @type {string}
     * @memberof EmailTemplate
     */
    id: string;
    /**
     * 
     * @type {boolean}
     * @memberof EmailTemplate
     */
    enabled: boolean;
    /**
     * 
     * @type {EmailTemplateType}
     * @memberof EmailTemplate
     */
    type: EmailTemplateType;
    /**
     * 
     * @type {string}
     * @memberof EmailTemplate
     */
    html: string;
    /**
     * 
     * @type {string}
     * @memberof EmailTemplate
     */
    subject: string;
}

/**
 * Check if a given object implements the EmailTemplate interface.
 */
export function instanceOfEmailTemplate(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "enabled" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "html" in value;
    isInstance = isInstance && "subject" in value;

    return isInstance;
}

export function EmailTemplateFromJSON(json: any): EmailTemplate {
    return EmailTemplateFromJSONTyped(json, false);
}

export function EmailTemplateFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmailTemplate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'enabled': json['enabled'],
        'type': EmailTemplateTypeFromJSON(json['type']),
        'html': json['html'],
        'subject': json['subject'],
    };
}

export function EmailTemplateToJSON(value?: EmailTemplate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'enabled': value.enabled,
        'type': EmailTemplateTypeToJSON(value.type),
        'html': value.html,
        'subject': value.subject,
    };
}

