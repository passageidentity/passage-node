/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FontFamily } from './FontFamily';
import {
    FontFamilyFromJSON,
    FontFamilyFromJSONTyped,
    FontFamilyToJSON,
} from './FontFamily';

/**
 * 
 * @export
 * @interface ElementCustomization
 */
export interface ElementCustomization {
    /**
     * Container background color
     * @type {string}
     * @memberof ElementCustomization
     */
    passageContainerBackgroundColor?: string;
    /**
     * Maximum width of container (px)
     * @type {number}
     * @memberof ElementCustomization
     */
    passageContainerMaxWidth?: number;
    /**
     * Input box background color (hex)
     * @type {string}
     * @memberof ElementCustomization
     */
    passageInputBoxBackgroundColor?: string;
    /**
     * Input box border radius (px)
     * @type {number}
     * @memberof ElementCustomization
     */
    passageInputBoxBorderRadius?: number;
    /**
     * 
     * @type {FontFamily}
     * @memberof ElementCustomization
     */
    passageHeaderFontFamily?: FontFamily;
    /**
     * 
     * @type {FontFamily}
     * @memberof ElementCustomization
     */
    passageBodyFontFamily?: FontFamily;
    /**
     * Header font colour (hex)
     * @type {string}
     * @memberof ElementCustomization
     */
    passageHeaderTextColor?: string;
    /**
     * Body font colour (hex)
     * @type {string}
     * @memberof ElementCustomization
     */
    passageBodyTextColor?: string;
    /**
     * Primary button background colour (hex)
     * @type {string}
     * @memberof ElementCustomization
     */
    passagePrimaryButtonBackgroundColor?: string;
    /**
     * Primary button font colour (hex)
     * @type {string}
     * @memberof ElementCustomization
     */
    passagePrimaryButtonTextColor?: string;
    /**
     * Primary button background on hover (hex)
     * @type {string}
     * @memberof ElementCustomization
     */
    passagePrimaryButtonHoverColor?: string;
    /**
     * Primary button border radius (px)
     * @type {number}
     * @memberof ElementCustomization
     */
    passagePrimaryButtonBorderRadius?: number;
    /**
     * Secondary button background colour (hex)
     * @type {string}
     * @memberof ElementCustomization
     */
    passageSecondaryButtonBackgroundColor?: string;
    /**
     * Secondary button font colour (hex)
     * @type {string}
     * @memberof ElementCustomization
     */
    passageSecondaryButtonTextColor?: string;
    /**
     * Secondary button background on hover (hex)
     * @type {string}
     * @memberof ElementCustomization
     */
    passageSecondaryButtonHoverColor?: string;
    /**
     * Secondary button border radius (px)
     * @type {number}
     * @memberof ElementCustomization
     */
    passageSecondaryButtonBorderRadius?: number;
}

/**
 * Check if a given object implements the ElementCustomization interface.
 */
export function instanceOfElementCustomization(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ElementCustomizationFromJSON(json: any): ElementCustomization {
    return ElementCustomizationFromJSONTyped(json, false);
}

export function ElementCustomizationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ElementCustomization {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'passageContainerBackgroundColor': !exists(json, 'passage_container_background_color') ? undefined : json['passage_container_background_color'],
        'passageContainerMaxWidth': !exists(json, 'passage_container_max_width') ? undefined : json['passage_container_max_width'],
        'passageInputBoxBackgroundColor': !exists(json, 'passage_input_box_background_color') ? undefined : json['passage_input_box_background_color'],
        'passageInputBoxBorderRadius': !exists(json, 'passage_input_box_border_radius') ? undefined : json['passage_input_box_border_radius'],
        'passageHeaderFontFamily': !exists(json, 'passage_header_font_family') ? undefined : FontFamilyFromJSON(json['passage_header_font_family']),
        'passageBodyFontFamily': !exists(json, 'passage_body_font_family') ? undefined : FontFamilyFromJSON(json['passage_body_font_family']),
        'passageHeaderTextColor': !exists(json, 'passage_header_text_color') ? undefined : json['passage_header_text_color'],
        'passageBodyTextColor': !exists(json, 'passage_body_text_color') ? undefined : json['passage_body_text_color'],
        'passagePrimaryButtonBackgroundColor': !exists(json, 'passage_primary_button_background_color') ? undefined : json['passage_primary_button_background_color'],
        'passagePrimaryButtonTextColor': !exists(json, 'passage_primary_button_text_color') ? undefined : json['passage_primary_button_text_color'],
        'passagePrimaryButtonHoverColor': !exists(json, 'passage_primary_button_hover_color') ? undefined : json['passage_primary_button_hover_color'],
        'passagePrimaryButtonBorderRadius': !exists(json, 'passage_primary_button_border_radius') ? undefined : json['passage_primary_button_border_radius'],
        'passageSecondaryButtonBackgroundColor': !exists(json, 'passage_secondary_button_background_color') ? undefined : json['passage_secondary_button_background_color'],
        'passageSecondaryButtonTextColor': !exists(json, 'passage_secondary_button_text_color') ? undefined : json['passage_secondary_button_text_color'],
        'passageSecondaryButtonHoverColor': !exists(json, 'passage_secondary_button_hover_color') ? undefined : json['passage_secondary_button_hover_color'],
        'passageSecondaryButtonBorderRadius': !exists(json, 'passage_secondary_button_border_radius') ? undefined : json['passage_secondary_button_border_radius'],
    };
}

export function ElementCustomizationToJSON(value?: ElementCustomization | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'passage_container_background_color': value.passageContainerBackgroundColor,
        'passage_container_max_width': value.passageContainerMaxWidth,
        'passage_input_box_background_color': value.passageInputBoxBackgroundColor,
        'passage_input_box_border_radius': value.passageInputBoxBorderRadius,
        'passage_header_font_family': FontFamilyToJSON(value.passageHeaderFontFamily),
        'passage_body_font_family': FontFamilyToJSON(value.passageBodyFontFamily),
        'passage_header_text_color': value.passageHeaderTextColor,
        'passage_body_text_color': value.passageBodyTextColor,
        'passage_primary_button_background_color': value.passagePrimaryButtonBackgroundColor,
        'passage_primary_button_text_color': value.passagePrimaryButtonTextColor,
        'passage_primary_button_hover_color': value.passagePrimaryButtonHoverColor,
        'passage_primary_button_border_radius': value.passagePrimaryButtonBorderRadius,
        'passage_secondary_button_background_color': value.passageSecondaryButtonBackgroundColor,
        'passage_secondary_button_text_color': value.passageSecondaryButtonTextColor,
        'passage_secondary_button_hover_color': value.passageSecondaryButtonHoverColor,
        'passage_secondary_button_border_radius': value.passageSecondaryButtonBorderRadius,
    };
}

