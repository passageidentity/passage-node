/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserRecentEvent } from './UserRecentEvent';
import {
    UserRecentEventFromJSON,
    UserRecentEventFromJSONTyped,
    UserRecentEventToJSON,
    UserRecentEventToJSONTyped,
} from './UserRecentEvent';
import type { UserSocialConnections } from './UserSocialConnections';
import {
    UserSocialConnectionsFromJSON,
    UserSocialConnectionsFromJSONTyped,
    UserSocialConnectionsToJSON,
    UserSocialConnectionsToJSONTyped,
} from './UserSocialConnections';
import type { WebAuthnDevices } from './WebAuthnDevices';
import {
    WebAuthnDevicesFromJSON,
    WebAuthnDevicesFromJSONTyped,
    WebAuthnDevicesToJSON,
    WebAuthnDevicesToJSONTyped,
} from './WebAuthnDevices';
import type { UserStatus } from './UserStatus';
import {
    UserStatusFromJSON,
    UserStatusFromJSONTyped,
    UserStatusToJSON,
    UserStatusToJSONTyped,
} from './UserStatus';
import type { WebAuthnType } from './WebAuthnType';
import {
    WebAuthnTypeFromJSON,
    WebAuthnTypeFromJSONTyped,
    WebAuthnTypeToJSON,
    WebAuthnTypeToJSONTyped,
} from './WebAuthnType';

/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 
     * @type {Date}
     * @memberof UserInfo
     */
    created_at: Date;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    email: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserInfo
     */
    email_verified: boolean;
    /**
     * The external ID of the user. Only set if the user was created in a Flex app.
     * @type {string}
     * @memberof UserInfo
     */
    external_id: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof UserInfo
     */
    last_login_at: Date;
    /**
     * 
     * @type {number}
     * @memberof UserInfo
     */
    login_count: number;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    phone: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserInfo
     */
    phone_verified: boolean;
    /**
     * 
     * @type {Array<UserRecentEvent>}
     * @memberof UserInfo
     */
    recent_events: Array<UserRecentEvent>;
    /**
     * 
     * @type {UserSocialConnections}
     * @memberof UserInfo
     */
    social_connections: UserSocialConnections;
    /**
     * 
     * @type {UserStatus}
     * @memberof UserInfo
     */
    status: UserStatus;
    /**
     * 
     * @type {Date}
     * @memberof UserInfo
     */
    updated_at: Date;
    /**
     * 
     * @type {object}
     * @memberof UserInfo
     */
    user_metadata: object | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserInfo
     */
    webauthn: boolean;
    /**
     * 
     * @type {Array<WebAuthnDevices>}
     * @memberof UserInfo
     */
    webauthn_devices: Array<WebAuthnDevices>;
    /**
     * List of credential types that have been used for authentication
     * @type {Array<WebAuthnType>}
     * @memberof UserInfo
     */
    webauthn_types: Array<WebAuthnType>;
}



/**
 * Check if a given object implements the UserInfo interface.
 */
export function instanceOfUserInfo(value: object): value is UserInfo {
    if (!('created_at' in value) || value['created_at'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('email_verified' in value) || value['email_verified'] === undefined) return false;
    if (!('external_id' in value) || value['external_id'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('last_login_at' in value) || value['last_login_at'] === undefined) return false;
    if (!('login_count' in value) || value['login_count'] === undefined) return false;
    if (!('phone' in value) || value['phone'] === undefined) return false;
    if (!('phone_verified' in value) || value['phone_verified'] === undefined) return false;
    if (!('recent_events' in value) || value['recent_events'] === undefined) return false;
    if (!('social_connections' in value) || value['social_connections'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('updated_at' in value) || value['updated_at'] === undefined) return false;
    if (!('user_metadata' in value) || value['user_metadata'] === undefined) return false;
    if (!('webauthn' in value) || value['webauthn'] === undefined) return false;
    if (!('webauthn_devices' in value) || value['webauthn_devices'] === undefined) return false;
    if (!('webauthn_types' in value) || value['webauthn_types'] === undefined) return false;
    return true;
}

export function UserInfoFromJSON(json: any): UserInfo {
    return UserInfoFromJSONTyped(json, false);
}

export function UserInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'created_at': (new Date(json['created_at'])),
        'email': json['email'],
        'email_verified': json['email_verified'],
        'external_id': json['external_id'],
        'id': json['id'],
        'last_login_at': (new Date(json['last_login_at'])),
        'login_count': json['login_count'],
        'phone': json['phone'],
        'phone_verified': json['phone_verified'],
        'recent_events': ((json['recent_events'] as Array<any>).map(UserRecentEventFromJSON)),
        'social_connections': UserSocialConnectionsFromJSON(json['social_connections']),
        'status': UserStatusFromJSON(json['status']),
        'updated_at': (new Date(json['updated_at'])),
        'user_metadata': json['user_metadata'],
        'webauthn': json['webauthn'],
        'webauthn_devices': ((json['webauthn_devices'] as Array<any>).map(WebAuthnDevicesFromJSON)),
        'webauthn_types': ((json['webauthn_types'] as Array<any>).map(WebAuthnTypeFromJSON)),
    };
}

export function UserInfoToJSON(json: any): UserInfo {
    return UserInfoToJSONTyped(json, false);
}

export function UserInfoToJSONTyped(value?: UserInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created_at': ((value['created_at']).toISOString()),
        'email': value['email'],
        'email_verified': value['email_verified'],
        'external_id': value['external_id'],
        'id': value['id'],
        'last_login_at': ((value['last_login_at']).toISOString()),
        'login_count': value['login_count'],
        'phone': value['phone'],
        'phone_verified': value['phone_verified'],
        'recent_events': ((value['recent_events'] as Array<any>).map(UserRecentEventToJSON)),
        'social_connections': UserSocialConnectionsToJSON(value['social_connections']),
        'status': UserStatusToJSON(value['status']),
        'updated_at': ((value['updated_at']).toISOString()),
        'user_metadata': value['user_metadata'],
        'webauthn': value['webauthn'],
        'webauthn_devices': ((value['webauthn_devices'] as Array<any>).map(WebAuthnDevicesToJSON)),
        'webauthn_types': ((value['webauthn_types'] as Array<any>).map(WebAuthnTypeToJSON)),
    };
}

