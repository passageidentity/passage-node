/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    BootEvent,
    instanceOfBootEvent,
    BootEventFromJSON,
    BootEventFromJSONTyped,
    BootEventToJSON,
} from './BootEvent';
import {
    BootFailureEvent,
    instanceOfBootFailureEvent,
    BootFailureEventFromJSON,
    BootFailureEventFromJSONTyped,
    BootFailureEventToJSON,
} from './BootFailureEvent';
import {
    LogEvent,
    instanceOfLogEvent,
    LogEventFromJSON,
    LogEventFromJSONTyped,
    LogEventToJSON,
} from './LogEvent';
import {
    MemoryLimitEvent,
    instanceOfMemoryLimitEvent,
    MemoryLimitEventFromJSON,
    MemoryLimitEventFromJSONTyped,
    MemoryLimitEventToJSON,
} from './MemoryLimitEvent';
import {
    TimeLimitEvent,
    instanceOfTimeLimitEvent,
    TimeLimitEventFromJSON,
    TimeLimitEventFromJSONTyped,
    TimeLimitEventToJSON,
} from './TimeLimitEvent';
import {
    UncaughtExceptionEvent,
    instanceOfUncaughtExceptionEvent,
    UncaughtExceptionEventFromJSON,
    UncaughtExceptionEventFromJSONTyped,
    UncaughtExceptionEventToJSON,
} from './UncaughtExceptionEvent';

/**
 * @type Event
 * 
 * @export
 */
export type Event = { event_type: 'boot' } & BootEvent | { event_type: 'bootFailure' } & BootFailureEvent | { event_type: 'log' } & LogEvent | { event_type: 'memoryLimit' } & MemoryLimitEvent | { event_type: 'timeLimit' } & TimeLimitEvent | { event_type: 'uncaughtException' } & UncaughtExceptionEvent;

export function EventFromJSON(json: any): Event {
    return EventFromJSONTyped(json, false);
}

export function EventFromJSONTyped(json: any, ignoreDiscriminator: boolean): Event {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['event_type']) {
        case 'boot':
            return {...BootEventFromJSONTyped(json, true), event_type: 'boot'};
        case 'bootFailure':
            return {...BootFailureEventFromJSONTyped(json, true), event_type: 'bootFailure'};
        case 'log':
            return {...LogEventFromJSONTyped(json, true), event_type: 'log'};
        case 'memoryLimit':
            return {...MemoryLimitEventFromJSONTyped(json, true), event_type: 'memoryLimit'};
        case 'timeLimit':
            return {...TimeLimitEventFromJSONTyped(json, true), event_type: 'timeLimit'};
        case 'uncaughtException':
            return {...UncaughtExceptionEventFromJSONTyped(json, true), event_type: 'uncaughtException'};
        default:
            throw new Error(`No variant of Event exists with 'event_type=${json['event_type']}'`);
    }
}

export function EventToJSON(value?: Event | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['event_type']) {
        case 'boot':
            return BootEventToJSON(value);
        case 'bootFailure':
            return BootFailureEventToJSON(value);
        case 'log':
            return LogEventToJSON(value);
        case 'memoryLimit':
            return MemoryLimitEventToJSON(value);
        case 'timeLimit':
            return TimeLimitEventToJSON(value);
        case 'uncaughtException':
            return UncaughtExceptionEventToJSON(value);
        default:
            throw new Error(`No variant of Event exists with 'event_type=${value['event_type']}'`);
    }

}

