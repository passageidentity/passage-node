/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EmailProviderConfig } from './EmailProviderConfig';
import {
    EmailProviderConfigFromJSON,
    EmailProviderConfigFromJSONTyped,
    EmailProviderConfigToJSON,
} from './EmailProviderConfig';

/**
 * 
 * @export
 * @interface EmailProvider
 */
export interface EmailProvider {
    /**
     * 
     * @type {EmailProviderConfig}
     * @memberof EmailProvider
     */
    config?: EmailProviderConfig | null;
    /**
     * 
     * @type {boolean}
     * @memberof EmailProvider
     */
    enabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmailProvider
     */
    from_address?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailProvider
     */
    type?: string;
}

/**
 * Check if a given object implements the EmailProvider interface.
 */
export function instanceOfEmailProvider(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EmailProviderFromJSON(json: any): EmailProvider {
    return EmailProviderFromJSONTyped(json, false);
}

export function EmailProviderFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmailProvider {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'config': !exists(json, 'config') ? undefined : EmailProviderConfigFromJSON(json['config']),
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'from_address': !exists(json, 'from_address') ? undefined : json['from_address'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function EmailProviderToJSON(value?: EmailProvider | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'config': EmailProviderConfigToJSON(value.config),
        'enabled': value.enabled,
        'from_address': value.from_address,
        'type': value.type,
    };
}

