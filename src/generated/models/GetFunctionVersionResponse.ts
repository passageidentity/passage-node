/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Language } from './Language';
import {
    LanguageFromJSON,
    LanguageFromJSONTyped,
    LanguageToJSON,
} from './Language';

/**
 * 
 * @export
 * @interface GetFunctionVersionResponse
 */
export interface GetFunctionVersionResponse {
    /**
     * 
     * @type {string}
     * @memberof GetFunctionVersionResponse
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof GetFunctionVersionResponse
     */
    version: number;
    /**
     * 
     * @type {Date}
     * @memberof GetFunctionVersionResponse
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof GetFunctionVersionResponse
     */
    code: string;
    /**
     * 
     * @type {Language}
     * @memberof GetFunctionVersionResponse
     */
    language: Language;
}

/**
 * Check if a given object implements the GetFunctionVersionResponse interface.
 */
export function instanceOfGetFunctionVersionResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "code" in value;
    isInstance = isInstance && "language" in value;

    return isInstance;
}

export function GetFunctionVersionResponseFromJSON(json: any): GetFunctionVersionResponse {
    return GetFunctionVersionResponseFromJSONTyped(json, false);
}

export function GetFunctionVersionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetFunctionVersionResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'version': json['version'],
        'createdAt': (new Date(json['created_at'])),
        'code': json['code'],
        'language': LanguageFromJSON(json['language']),
    };
}

export function GetFunctionVersionResponseToJSON(value?: GetFunctionVersionResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'version': value.version,
        'created_at': (value.createdAt.toISOString()),
        'code': value.code,
        'language': LanguageToJSON(value.language),
    };
}

