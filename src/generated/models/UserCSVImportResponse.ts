/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserCSVImportError } from './UserCSVImportError';
import {
    UserCSVImportErrorFromJSON,
    UserCSVImportErrorFromJSONTyped,
    UserCSVImportErrorToJSON,
} from './UserCSVImportError';

/**
 * 
 * @export
 * @interface UserCSVImportResponse
 */
export interface UserCSVImportResponse {
    /**
     * 
     * @type {Array<UserCSVImportError>}
     * @memberof UserCSVImportResponse
     */
    errors: Array<UserCSVImportError>;
    /**
     * 
     * @type {Array<{ [key: string]: string; }>}
     * @memberof UserCSVImportResponse
     */
    existing: Array<{ [key: string]: string; }>;
    /**
     * 
     * @type {Array<{ [key: string]: string; }>}
     * @memberof UserCSVImportResponse
     */
    imported: Array<{ [key: string]: string; }>;
    /**
     * 
     * @type {number}
     * @memberof UserCSVImportResponse
     */
    num_users_errored: number;
    /**
     * 
     * @type {number}
     * @memberof UserCSVImportResponse
     */
    num_users_existing: number;
    /**
     * 
     * @type {number}
     * @memberof UserCSVImportResponse
     */
    num_users_imported: number;
    /**
     * 
     * @type {number}
     * @memberof UserCSVImportResponse
     */
    num_users_received: number;
}

/**
 * Check if a given object implements the UserCSVImportResponse interface.
 */
export function instanceOfUserCSVImportResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "errors" in value;
    isInstance = isInstance && "existing" in value;
    isInstance = isInstance && "imported" in value;
    isInstance = isInstance && "num_users_errored" in value;
    isInstance = isInstance && "num_users_existing" in value;
    isInstance = isInstance && "num_users_imported" in value;
    isInstance = isInstance && "num_users_received" in value;

    return isInstance;
}

export function UserCSVImportResponseFromJSON(json: any): UserCSVImportResponse {
    return UserCSVImportResponseFromJSONTyped(json, false);
}

export function UserCSVImportResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserCSVImportResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'errors': ((json['errors'] as Array<any>).map(UserCSVImportErrorFromJSON)),
        'existing': json['existing'],
        'imported': json['imported'],
        'num_users_errored': json['num_users_errored'],
        'num_users_existing': json['num_users_existing'],
        'num_users_imported': json['num_users_imported'],
        'num_users_received': json['num_users_received'],
    };
}

export function UserCSVImportResponseToJSON(value?: UserCSVImportResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'errors': ((value.errors as Array<any>).map(UserCSVImportErrorToJSON)),
        'existing': value.existing,
        'imported': value.imported,
        'num_users_errored': value.num_users_errored,
        'num_users_existing': value.num_users_existing,
        'num_users_imported': value.num_users_imported,
        'num_users_received': value.num_users_received,
    };
}

