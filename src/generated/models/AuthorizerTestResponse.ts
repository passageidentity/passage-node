/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthorizerResult } from './AuthorizerResult';
import {
    AuthorizerResultFromJSON,
    AuthorizerResultFromJSONTyped,
    AuthorizerResultToJSON,
} from './AuthorizerResult';
import type { TestError } from './TestError';
import {
    TestErrorFromJSON,
    TestErrorFromJSONTyped,
    TestErrorToJSON,
} from './TestError';

/**
 * 
 * @export
 * @interface AuthorizerTestResponse
 */
export interface AuthorizerTestResponse {
    /**
     * 
     * @type {TestError}
     * @memberof AuthorizerTestResponse
     */
    error?: TestError;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthorizerTestResponse
     */
    logs?: Array<string>;
    /**
     * 
     * @type {AuthorizerResult}
     * @memberof AuthorizerTestResponse
     */
    result: AuthorizerResult;
}

/**
 * Check if a given object implements the AuthorizerTestResponse interface.
 */
export function instanceOfAuthorizerTestResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "result" in value;

    return isInstance;
}

export function AuthorizerTestResponseFromJSON(json: any): AuthorizerTestResponse {
    return AuthorizerTestResponseFromJSONTyped(json, false);
}

export function AuthorizerTestResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthorizerTestResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'error': !exists(json, 'error') ? undefined : TestErrorFromJSON(json['error']),
        'logs': !exists(json, 'logs') ? undefined : json['logs'],
        'result': AuthorizerResultFromJSON(json['result']),
    };
}

export function AuthorizerTestResponseToJSON(value?: AuthorizerTestResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'error': TestErrorToJSON(value.error),
        'logs': value.logs,
        'result': AuthorizerResultToJSON(value.result),
    };
}

