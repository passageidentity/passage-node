/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ListFunctionEventsItem } from './ListFunctionEventsItem';
import {
    ListFunctionEventsItemFromJSON,
    ListFunctionEventsItemFromJSONTyped,
    ListFunctionEventsItemToJSON,
} from './ListFunctionEventsItem';

/**
 * 
 * @export
 * @interface ListFunctionEventsResponse
 */
export interface ListFunctionEventsResponse {
    /**
     * 
     * @type {Array<ListFunctionEventsItem>}
     * @memberof ListFunctionEventsResponse
     */
    functionEvents: Array<ListFunctionEventsItem>;
    /**
     * The timestamp offset of the events in this response, as Unix milliseconds.
     * @type {number}
     * @memberof ListFunctionEventsResponse
     */
    since: number;
    /**
     * The last timestamp of the events in this response, as Unix milliseconds. Use it as the `since` query parameter in the next request to get the next page.
     * @type {number}
     * @memberof ListFunctionEventsResponse
     */
    until: number;
}

/**
 * Check if a given object implements the ListFunctionEventsResponse interface.
 */
export function instanceOfListFunctionEventsResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "functionEvents" in value;
    isInstance = isInstance && "since" in value;
    isInstance = isInstance && "until" in value;

    return isInstance;
}

export function ListFunctionEventsResponseFromJSON(json: any): ListFunctionEventsResponse {
    return ListFunctionEventsResponseFromJSONTyped(json, false);
}

export function ListFunctionEventsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ListFunctionEventsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'functionEvents': ((json['function_events'] as Array<any>).map(ListFunctionEventsItemFromJSON)),
        'since': json['since'],
        'until': json['until'],
    };
}

export function ListFunctionEventsResponseToJSON(value?: ListFunctionEventsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'function_events': ((value.functionEvents as Array<any>).map(ListFunctionEventsItemToJSON)),
        'since': value.since,
        'until': value.until,
    };
}

