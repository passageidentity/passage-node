/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Model403Error
 */
export interface Model403Error {
    /**
     * 
     * @type {string}
     * @memberof Model403Error
     */
    code: Model403ErrorCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof Model403Error
     */
    error: string;
}


/**
 * @export
 */
export const Model403ErrorCodeEnum = {
    CannotCreateOrganizationBillingPortalSession: 'cannot_create_organization_billing_portal_session',
    CannotCreateTransaction: 'cannot_create_transaction',
    CannotDeleteAdmin: 'cannot_delete_admin',
    CannotDeleteOrganizationMember: 'cannot_delete_organization_member',
    CannotSelfUpdateOrganizationMember: 'cannot_self_update_organization_member',
    OperationNotAllowed: 'operation_not_allowed'
} as const;
export type Model403ErrorCodeEnum = typeof Model403ErrorCodeEnum[keyof typeof Model403ErrorCodeEnum];


/**
 * Check if a given object implements the Model403Error interface.
 */
export function instanceOfModel403Error(value: object): value is Model403Error {
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('error' in value) || value['error'] === undefined) return false;
    return true;
}

export function Model403ErrorFromJSON(json: any): Model403Error {
    return Model403ErrorFromJSONTyped(json, false);
}

export function Model403ErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Model403Error {
    if (json == null) {
        return json;
    }
    return {
        
        'code': json['code'],
        'error': json['error'],
    };
}

export function Model403ErrorToJSON(json: any): Model403Error {
    return Model403ErrorToJSONTyped(json, false);
}

export function Model403ErrorToJSONTyped(value?: Model403Error | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'code': value['code'],
        'error': value['error'],
    };
}

