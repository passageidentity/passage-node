/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Language } from './Language';
import {
    LanguageFromJSON,
    LanguageFromJSONTyped,
    LanguageToJSON,
} from './Language';

/**
 * 
 * @export
 * @interface FunctionResponse
 */
export interface FunctionResponse {
    /**
     * 
     * @type {string}
     * @memberof FunctionResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof FunctionResponse
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof FunctionResponse
     */
    code: string;
    /**
     * 
     * @type {Language}
     * @memberof FunctionResponse
     */
    language: Language;
    /**
     * 
     * @type {boolean}
     * @memberof FunctionResponse
     */
    has_draft: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof FunctionResponse
     */
    secret_keys: Array<string>;
}

/**
 * Check if a given object implements the FunctionResponse interface.
 */
export function instanceOfFunctionResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "code" in value;
    isInstance = isInstance && "language" in value;
    isInstance = isInstance && "has_draft" in value;
    isInstance = isInstance && "secret_keys" in value;

    return isInstance;
}

export function FunctionResponseFromJSON(json: any): FunctionResponse {
    return FunctionResponseFromJSONTyped(json, false);
}

export function FunctionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): FunctionResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'code': json['code'],
        'language': LanguageFromJSON(json['language']),
        'has_draft': json['has_draft'],
        'secret_keys': json['secret_keys'],
    };
}

export function FunctionResponseToJSON(value?: FunctionResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'code': value.code,
        'language': LanguageToJSON(value.language),
        'has_draft': value.has_draft,
        'secret_keys': value.secret_keys,
    };
}

