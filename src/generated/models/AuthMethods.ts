/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MagicLinkAuthMethod } from './MagicLinkAuthMethod';
import {
    MagicLinkAuthMethodFromJSON,
    MagicLinkAuthMethodFromJSONTyped,
    MagicLinkAuthMethodToJSON,
    MagicLinkAuthMethodToJSONTyped,
} from './MagicLinkAuthMethod';
import type { PasskeysAuthMethod } from './PasskeysAuthMethod';
import {
    PasskeysAuthMethodFromJSON,
    PasskeysAuthMethodFromJSONTyped,
    PasskeysAuthMethodToJSON,
    PasskeysAuthMethodToJSONTyped,
} from './PasskeysAuthMethod';
import type { OtpAuthMethod } from './OtpAuthMethod';
import {
    OtpAuthMethodFromJSON,
    OtpAuthMethodFromJSONTyped,
    OtpAuthMethodToJSON,
    OtpAuthMethodToJSONTyped,
} from './OtpAuthMethod';

/**
 * Denotes what methods this app is allowed to use for authentication with configurations
 * @export
 * @interface AuthMethods
 */
export interface AuthMethods {
    /**
     * 
     * @type {PasskeysAuthMethod}
     * @memberof AuthMethods
     */
    passkeys: PasskeysAuthMethod;
    /**
     * 
     * @type {OtpAuthMethod}
     * @memberof AuthMethods
     */
    otp: OtpAuthMethod;
    /**
     * 
     * @type {MagicLinkAuthMethod}
     * @memberof AuthMethods
     */
    magic_link: MagicLinkAuthMethod;
}

/**
 * Check if a given object implements the AuthMethods interface.
 */
export function instanceOfAuthMethods(value: object): value is AuthMethods {
    if (!('passkeys' in value) || value['passkeys'] === undefined) return false;
    if (!('otp' in value) || value['otp'] === undefined) return false;
    if (!('magic_link' in value) || value['magic_link'] === undefined) return false;
    return true;
}

export function AuthMethodsFromJSON(json: any): AuthMethods {
    return AuthMethodsFromJSONTyped(json, false);
}

export function AuthMethodsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthMethods {
    if (json == null) {
        return json;
    }
    return {
        
        'passkeys': PasskeysAuthMethodFromJSON(json['passkeys']),
        'otp': OtpAuthMethodFromJSON(json['otp']),
        'magic_link': MagicLinkAuthMethodFromJSON(json['magic_link']),
    };
}

export function AuthMethodsToJSON(json: any): AuthMethods {
    return AuthMethodsToJSONTyped(json, false);
}

export function AuthMethodsToJSONTyped(value?: AuthMethods | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'passkeys': PasskeysAuthMethodToJSON(value['passkeys']),
        'otp': OtpAuthMethodToJSON(value['otp']),
        'magic_link': MagicLinkAuthMethodToJSON(value['magic_link']),
    };
}

