/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateEmailTemplateHandler201Response,
  CreateEmailTemplateRequest,
  GetEmailTemplateHandler200Response,
  ListEmailTemplatesHandler200Response,
  Model400Error,
  Model404Error,
  UpdateEmailTemplateRequest,
} from '../models/index';
import {
    CreateEmailTemplateHandler201ResponseFromJSON,
    CreateEmailTemplateHandler201ResponseToJSON,
    CreateEmailTemplateRequestFromJSON,
    CreateEmailTemplateRequestToJSON,
    GetEmailTemplateHandler200ResponseFromJSON,
    GetEmailTemplateHandler200ResponseToJSON,
    ListEmailTemplatesHandler200ResponseFromJSON,
    ListEmailTemplatesHandler200ResponseToJSON,
    Model400ErrorFromJSON,
    Model400ErrorToJSON,
    Model404ErrorFromJSON,
    Model404ErrorToJSON,
    UpdateEmailTemplateRequestFromJSON,
    UpdateEmailTemplateRequestToJSON,
} from '../models/index';

export interface CreateEmailTemplateHandlerRequest {
    appId: string;
    createEmailTemplateRequest: CreateEmailTemplateRequest;
}

export interface DeleteEmailTemplateHandlerRequest {
    appId: string;
    templateId: string;
}

export interface GetEmailTemplateHandlerRequest {
    appId: string;
    templateId: string;
}

export interface ListEmailTemplatesHandlerRequest {
    appId: string;
}

export interface UpdateEmailTemplateHandlerRequest {
    appId: string;
    templateId: string;
    updateEmailTemplateRequest?: UpdateEmailTemplateRequest;
}

/**
 * 
 */
export class EmailTemplateApi extends runtime.BaseAPI {

    /**
     * Initializes a Passage App\'s Email Templates
     * Create Email Template
     */
    async createEmailTemplateHandlerRaw(requestParameters: CreateEmailTemplateHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEmailTemplateHandler201Response>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createEmailTemplateHandler.');
        }

        if (requestParameters.createEmailTemplateRequest === null || requestParameters.createEmailTemplateRequest === undefined) {
            throw new runtime.RequiredError('createEmailTemplateRequest','Required parameter requestParameters.createEmailTemplateRequest was null or undefined when calling createEmailTemplateHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/email-templates`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEmailTemplateRequestToJSON(requestParameters.createEmailTemplateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEmailTemplateHandler201ResponseFromJSON(jsonValue));
    }

    /**
     * Initializes a Passage App\'s Email Templates
     * Create Email Template
     */
    async createEmailTemplateHandler(requestParameters: CreateEmailTemplateHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEmailTemplateHandler201Response> {
        const response = await this.createEmailTemplateHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a Passage App\'s Email Template
     * Delete Email Template
     */
    async deleteEmailTemplateHandlerRaw(requestParameters: DeleteEmailTemplateHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling deleteEmailTemplateHandler.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling deleteEmailTemplateHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/email-templates/{template_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a Passage App\'s Email Template
     * Delete Email Template
     */
    async deleteEmailTemplateHandler(requestParameters: DeleteEmailTemplateHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEmailTemplateHandlerRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a Passage App\'s Email Template
     * Get Email Template
     */
    async getEmailTemplateHandlerRaw(requestParameters: GetEmailTemplateHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEmailTemplateHandler200Response>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getEmailTemplateHandler.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling getEmailTemplateHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/email-templates/{template_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEmailTemplateHandler200ResponseFromJSON(jsonValue));
    }

    /**
     * Returns a Passage App\'s Email Template
     * Get Email Template
     */
    async getEmailTemplateHandler(requestParameters: GetEmailTemplateHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEmailTemplateHandler200Response> {
        const response = await this.getEmailTemplateHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List of Passage App\'s Email Templates
     * List Email Templates
     */
    async listEmailTemplatesHandlerRaw(requestParameters: ListEmailTemplatesHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListEmailTemplatesHandler200Response>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling listEmailTemplatesHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/email-templates`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListEmailTemplatesHandler200ResponseFromJSON(jsonValue));
    }

    /**
     * List of Passage App\'s Email Templates
     * List Email Templates
     */
    async listEmailTemplatesHandler(requestParameters: ListEmailTemplatesHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListEmailTemplatesHandler200Response> {
        const response = await this.listEmailTemplatesHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a Passage App\'s Email Template
     * Update Email Template
     */
    async updateEmailTemplateHandlerRaw(requestParameters: UpdateEmailTemplateHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateEmailTemplateHandler201Response>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling updateEmailTemplateHandler.');
        }

        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling updateEmailTemplateHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/email-templates/{template_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEmailTemplateRequestToJSON(requestParameters.updateEmailTemplateRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateEmailTemplateHandler201ResponseFromJSON(jsonValue));
    }

    /**
     * Updates a Passage App\'s Email Template
     * Update Email Template
     */
    async updateEmailTemplateHandler(requestParameters: UpdateEmailTemplateHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateEmailTemplateHandler201Response> {
        const response = await this.updateEmailTemplateHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
