/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EmailProvider,
  EmailProviderResponse,
  Model400Error,
  Model404Error,
  Model500Error,
} from '../models';
import {
    EmailProviderFromJSON,
    EmailProviderToJSON,
    EmailProviderResponseFromJSON,
    EmailProviderResponseToJSON,
    Model400ErrorFromJSON,
    Model400ErrorToJSON,
    Model404ErrorFromJSON,
    Model404ErrorToJSON,
    Model500ErrorFromJSON,
    Model500ErrorToJSON,
} from '../models';

export interface CreateEmailProviderHandlerRequest {
    appId: string;
    emailProvider: EmailProvider;
}

export interface GetEmailProviderHandlerRequest {
    appId: string;
}

export interface UpdateEmailProviderHandlerRequest {
    appId: string;
    emailProvider: EmailProvider;
}

/**
 * 
 */
export class EmailProvidersApi extends runtime.BaseAPI {

    /**
     * Configure your Email Provider
     * Configure Email Provider
     */
    async createEmailProviderHandlerRaw(requestParameters: CreateEmailProviderHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailProviderResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createEmailProviderHandler.');
        }

        if (requestParameters.emailProvider === null || requestParameters.emailProvider === undefined) {
            throw new runtime.RequiredError('emailProvider','Required parameter requestParameters.emailProvider was null or undefined when calling createEmailProviderHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/email-provider`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailProviderToJSON(requestParameters.emailProvider),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailProviderResponseFromJSON(jsonValue));
    }

    /**
     * Configure your Email Provider
     * Configure Email Provider
     */
    async createEmailProviderHandler(requestParameters: CreateEmailProviderHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailProviderResponse> {
        const response = await this.createEmailProviderHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve your Email Provider
     * Get Email Provider
     */
    async getEmailProviderHandlerRaw(requestParameters: GetEmailProviderHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailProviderResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getEmailProviderHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/email-provider`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailProviderResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve your Email Provider
     * Get Email Provider
     */
    async getEmailProviderHandler(requestParameters: GetEmailProviderHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailProviderResponse> {
        const response = await this.getEmailProviderHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update your Email Provider
     * Update Email Provider
     */
    async updateEmailProviderHandlerRaw(requestParameters: UpdateEmailProviderHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailProviderResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling updateEmailProviderHandler.');
        }

        if (requestParameters.emailProvider === null || requestParameters.emailProvider === undefined) {
            throw new runtime.RequiredError('emailProvider','Required parameter requestParameters.emailProvider was null or undefined when calling updateEmailProviderHandler.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/email-provider`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EmailProviderToJSON(requestParameters.emailProvider),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailProviderResponseFromJSON(jsonValue));
    }

    /**
     * Update your Email Provider
     * Update Email Provider
     */
    async updateEmailProviderHandler(requestParameters: UpdateEmailProviderHandlerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailProviderResponse> {
        const response = await this.updateEmailProviderHandlerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
