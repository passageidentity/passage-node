/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUserMetadataField,
  Layouts,
  LayoutsResponse,
  Model400Error,
  Model401Error,
  Model404Error,
  Model500Error,
  UpdateUserMetadataField,
  UserMetadataFieldResponse,
  UserMetadataSchemaResponse,
} from '../models';
import {
    CreateUserMetadataFieldFromJSON,
    CreateUserMetadataFieldToJSON,
    LayoutsFromJSON,
    LayoutsToJSON,
    LayoutsResponseFromJSON,
    LayoutsResponseToJSON,
    Model400ErrorFromJSON,
    Model400ErrorToJSON,
    Model401ErrorFromJSON,
    Model401ErrorToJSON,
    Model404ErrorFromJSON,
    Model404ErrorToJSON,
    Model500ErrorFromJSON,
    Model500ErrorToJSON,
    UpdateUserMetadataFieldFromJSON,
    UpdateUserMetadataFieldToJSON,
    UserMetadataFieldResponseFromJSON,
    UserMetadataFieldResponseToJSON,
    UserMetadataSchemaResponseFromJSON,
    UserMetadataSchemaResponseToJSON,
} from '../models';

export interface AddAppMetadataSchemaRequest {
    appId: string;
    createUserMetadataField: Array<CreateUserMetadataField>;
}

export interface DeleteMetadataFieldRequest {
    appId: string;
    metadataFieldId: string;
}

export interface GetAppMetadataSchemaRequest {
    appId: string;
}

export interface GetMetadataFieldRequest {
    appId: string;
    metadataFieldId: string;
}

export interface UpdateAppLayoutsRequest {
    appId: string;
    layouts: Layouts;
}

export interface UpdateMetadataFieldRequest {
    appId: string;
    metadataFieldId: string;
    updateUserMetadataField: UpdateUserMetadataField;
}

/**
 * 
 */
export class AppMetadataSchemaApi extends runtime.BaseAPI {

    /**
     * For an authorized user add user metadata schema for an app
     * Add user metadata schema for an App
     */
    async addAppMetadataSchemaRaw(requestParameters: AddAppMetadataSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserMetadataSchemaResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling addAppMetadataSchema.');
        }

        if (requestParameters.createUserMetadataField === null || requestParameters.createUserMetadataField === undefined) {
            throw new runtime.RequiredError('createUserMetadataField','Required parameter requestParameters.createUserMetadataField was null or undefined when calling addAppMetadataSchema.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/user-metadata`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createUserMetadataField.map(CreateUserMetadataFieldToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserMetadataSchemaResponseFromJSON(jsonValue));
    }

    /**
     * For an authorized user add user metadata schema for an app
     * Add user metadata schema for an App
     */
    async addAppMetadataSchema(requestParameters: AddAppMetadataSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserMetadataSchemaResponse> {
        const response = await this.addAppMetadataSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * For an authorized user delete a particular metadata field from the user metadata schema
     * Delete a particular metadata field from the user metadata schema
     */
    async deleteMetadataFieldRaw(requestParameters: DeleteMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling deleteMetadataField.');
        }

        if (requestParameters.metadataFieldId === null || requestParameters.metadataFieldId === undefined) {
            throw new runtime.RequiredError('metadataFieldId','Required parameter requestParameters.metadataFieldId was null or undefined when calling deleteMetadataField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/user-metadata/{metadata_field_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"metadata_field_id"}}`, encodeURIComponent(String(requestParameters.metadataFieldId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * For an authorized user delete a particular metadata field from the user metadata schema
     * Delete a particular metadata field from the user metadata schema
     */
    async deleteMetadataField(requestParameters: DeleteMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMetadataFieldRaw(requestParameters, initOverrides);
    }

    /**
     * For an authorized user get user metadata schema for an app
     * Get user metadata schema for an App
     */
    async getAppMetadataSchemaRaw(requestParameters: GetAppMetadataSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserMetadataSchemaResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getAppMetadataSchema.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/user-metadata`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserMetadataSchemaResponseFromJSON(jsonValue));
    }

    /**
     * For an authorized user get user metadata schema for an app
     * Get user metadata schema for an App
     */
    async getAppMetadataSchema(requestParameters: GetAppMetadataSchemaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserMetadataSchemaResponse> {
        const response = await this.getAppMetadataSchemaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * For an authorized user get a particular metadata field from the user metadata schema
     * Get a particular metadata field from the user metadata schema
     */
    async getMetadataFieldRaw(requestParameters: GetMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserMetadataFieldResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getMetadataField.');
        }

        if (requestParameters.metadataFieldId === null || requestParameters.metadataFieldId === undefined) {
            throw new runtime.RequiredError('metadataFieldId','Required parameter requestParameters.metadataFieldId was null or undefined when calling getMetadataField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/user-metadata/{metadata_field_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"metadata_field_id"}}`, encodeURIComponent(String(requestParameters.metadataFieldId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserMetadataFieldResponseFromJSON(jsonValue));
    }

    /**
     * For an authorized user get a particular metadata field from the user metadata schema
     * Get a particular metadata field from the user metadata schema
     */
    async getMetadataField(requestParameters: GetMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserMetadataFieldResponse> {
        const response = await this.getMetadataFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update layouts for an app\'s registration and profile form
     * Update app layouts
     */
    async updateAppLayoutsRaw(requestParameters: UpdateAppLayoutsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LayoutsResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling updateAppLayouts.');
        }

        if (requestParameters.layouts === null || requestParameters.layouts === undefined) {
            throw new runtime.RequiredError('layouts','Required parameter requestParameters.layouts was null or undefined when calling updateAppLayouts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/layouts`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: LayoutsToJSON(requestParameters.layouts),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LayoutsResponseFromJSON(jsonValue));
    }

    /**
     * Update layouts for an app\'s registration and profile form
     * Update app layouts
     */
    async updateAppLayouts(requestParameters: UpdateAppLayoutsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LayoutsResponse> {
        const response = await this.updateAppLayoutsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * For an authorized user update a particular metadata field from the user metadata schema
     * Update a particular metadata field from the user metadata schema
     */
    async updateMetadataFieldRaw(requestParameters: UpdateMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserMetadataFieldResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling updateMetadataField.');
        }

        if (requestParameters.metadataFieldId === null || requestParameters.metadataFieldId === undefined) {
            throw new runtime.RequiredError('metadataFieldId','Required parameter requestParameters.metadataFieldId was null or undefined when calling updateMetadataField.');
        }

        if (requestParameters.updateUserMetadataField === null || requestParameters.updateUserMetadataField === undefined) {
            throw new runtime.RequiredError('updateUserMetadataField','Required parameter requestParameters.updateUserMetadataField was null or undefined when calling updateMetadataField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/user-metadata/{metadata_field_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"metadata_field_id"}}`, encodeURIComponent(String(requestParameters.metadataFieldId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserMetadataFieldToJSON(requestParameters.updateUserMetadataField),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserMetadataFieldResponseFromJSON(jsonValue));
    }

    /**
     * For an authorized user update a particular metadata field from the user metadata schema
     * Update a particular metadata field from the user metadata schema
     */
    async updateMetadataField(requestParameters: UpdateMetadataFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserMetadataFieldResponse> {
        const response = await this.updateMetadataFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
