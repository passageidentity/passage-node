/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiKeyResponse,
  CreateApiKeyRequest,
  CreateApiKeyResponse,
  ListApiKeysResponse,
  Model400Error,
  Model401Error,
  Model404Error,
  Model500Error,
  UpdateApiKeyRequest,
} from '../models/index';
import {
    ApiKeyResponseFromJSON,
    ApiKeyResponseToJSON,
    CreateApiKeyRequestFromJSON,
    CreateApiKeyRequestToJSON,
    CreateApiKeyResponseFromJSON,
    CreateApiKeyResponseToJSON,
    ListApiKeysResponseFromJSON,
    ListApiKeysResponseToJSON,
    Model400ErrorFromJSON,
    Model400ErrorToJSON,
    Model401ErrorFromJSON,
    Model401ErrorToJSON,
    Model404ErrorFromJSON,
    Model404ErrorToJSON,
    Model500ErrorFromJSON,
    Model500ErrorToJSON,
    UpdateApiKeyRequestFromJSON,
    UpdateApiKeyRequestToJSON,
} from '../models/index';

export interface CreateApikeyRequest {
    appId: string;
    createApiKeyRequest: CreateApiKeyRequest;
}

export interface DeleteApikeyRequest {
    appId: string;
    apiKeyId: string;
}

export interface GetApikeyRequest {
    appId: string;
    apiKeyId: string;
}

export interface ListApikeysRequest {
    appId: string;
}

export interface UpdateApikeyRequest {
    appId: string;
    apiKeyId: string;
    updateApiKeyRequest: UpdateApiKeyRequest;
}

/**
 * 
 */
export class ApiKeysApi extends runtime.BaseAPI {

    /**
     * Create a new API key.
     * Create API Key
     */
    async createApikeyRaw(requestParameters: CreateApikeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateApiKeyResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createApikey.');
        }

        if (requestParameters.createApiKeyRequest === null || requestParameters.createApiKeyRequest === undefined) {
            throw new runtime.RequiredError('createApiKeyRequest','Required parameter requestParameters.createApiKeyRequest was null or undefined when calling createApikey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/api-keys`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateApiKeyRequestToJSON(requestParameters.createApiKeyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateApiKeyResponseFromJSON(jsonValue));
    }

    /**
     * Create a new API key.
     * Create API Key
     */
    async createApikey(requestParameters: CreateApikeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateApiKeyResponse> {
        const response = await this.createApikeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an API key.
     * Delete API Key
     */
    async deleteApikeyRaw(requestParameters: DeleteApikeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling deleteApikey.');
        }

        if (requestParameters.apiKeyId === null || requestParameters.apiKeyId === undefined) {
            throw new runtime.RequiredError('apiKeyId','Required parameter requestParameters.apiKeyId was null or undefined when calling deleteApikey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/api-keys/{api_key_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"api_key_id"}}`, encodeURIComponent(String(requestParameters.apiKeyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an API key.
     * Delete API Key
     */
    async deleteApikey(requestParameters: DeleteApikeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApikeyRaw(requestParameters, initOverrides);
    }

    /**
     * Get information about an API key.
     * Get API Key
     */
    async getApikeyRaw(requestParameters: GetApikeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiKeyResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling getApikey.');
        }

        if (requestParameters.apiKeyId === null || requestParameters.apiKeyId === undefined) {
            throw new runtime.RequiredError('apiKeyId','Required parameter requestParameters.apiKeyId was null or undefined when calling getApikey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/api-keys/{api_key_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"api_key_id"}}`, encodeURIComponent(String(requestParameters.apiKeyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyResponseFromJSON(jsonValue));
    }

    /**
     * Get information about an API key.
     * Get API Key
     */
    async getApikey(requestParameters: GetApikeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiKeyResponse> {
        const response = await this.getApikeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List API keys for an application.
     * List API Keys
     */
    async listApikeysRaw(requestParameters: ListApikeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListApiKeysResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling listApikeys.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/api-keys`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListApiKeysResponseFromJSON(jsonValue));
    }

    /**
     * List API keys for an application.
     * List API Keys
     */
    async listApikeys(requestParameters: ListApikeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListApiKeysResponse> {
        const response = await this.listApikeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an API key.
     * Update API Key
     */
    async updateApikeyRaw(requestParameters: UpdateApikeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiKeyResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new runtime.RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling updateApikey.');
        }

        if (requestParameters.apiKeyId === null || requestParameters.apiKeyId === undefined) {
            throw new runtime.RequiredError('apiKeyId','Required parameter requestParameters.apiKeyId was null or undefined when calling updateApikey.');
        }

        if (requestParameters.updateApiKeyRequest === null || requestParameters.updateApiKeyRequest === undefined) {
            throw new runtime.RequiredError('updateApiKeyRequest','Required parameter requestParameters.updateApiKeyRequest was null or undefined when calling updateApikey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/api-keys/{api_key_id}`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))).replace(`{${"api_key_id"}}`, encodeURIComponent(String(requestParameters.apiKeyId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApiKeyRequestToJSON(requestParameters.updateApiKeyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiKeyResponseFromJSON(jsonValue));
    }

    /**
     * Update an API key.
     * Update API Key
     */
    async updateApikey(requestParameters: UpdateApikeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiKeyResponse> {
        const response = await this.updateApikeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
